<project name="Peergos" default="dist" basedir=".">
  <description>
    Building EmailBridge
  </description>

  <!-- Need to run "sudo apt-get install ant-optional" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <fileset dir="ant.lib"/>
    </classpath>
  </taskdef>
  
  <property name="src" location="src"/>
  <property name="test.sources" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="test.reports" location="test.reports"/>
  <property name="timestamp.millis" value="1489731900000"/>

  <path id="dep.runtime">
    <fileset dir="./lib">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="dep.build">
    <fileset dir="./lib-build">
        <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="project.class.path">
    <!-- Add any additional non-server libs (such as JUnit) here -->
    <pathelement location="lib-build/junit-4.11.jar"/>
    <pathelement location="lib-build/hamcrest-core-1.3.jar"/>
  </path>
  
  <target name="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${test.reports}"/>
  </target>

  <target name="compile" depends="clean, init"
        description="compile the source">
    <javac includeantruntime="false" destdir="${build}" debug="true" debuglevel="lines,vars,source" source="11" target="11">
      <src>
  	    <pathelement location="${src}"/>
      </src>
      <classpath>
	<fileset dir="lib">
          <include name="**/*.jar" />
        </fileset>
	<fileset dir="lib-build">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <mkdir dir="${dist}/lib"/>
    <copy todir="${dist}/lib">
      <fileset dir="lib"/>
    </copy>
    <copy todir="${build}/native-lib">
      <fileset dir="native-lib"/>
    </copy>
    <manifestclasspath property="manifest_cp" jarfile="myjar.jar">
      <classpath refid="dep.runtime" />
    </manifestclasspath>
    <jar jarfile="${dist}/EmailBridge.jar" basedir="${build}" includes="**">
      <manifest>
        <attribute name="Main-Class" value="peergos.email.Main"/>
        <attribute name="Class-Path" value="${manifest_cp}"/>
        <attribute name="Created-By" value="Java"/>
        <attribute name="Ant-Version" value="Ant"/>
      </manifest>
    </jar>
    <exec executable="java">
      <arg value="ReproducibleJar.java"/>
      <arg value="${dist}/EmailBridge.jar"/>
      <arg value="${timestamp.millis}"/>
    </exec>
    <copy todir=".">
      <fileset file="${dist}/EmailBridge.jar"/>
    </copy>
  </target>

  <target name="test" depends="parallel_test">
    <exec executable="./print_test_errors.sh" failonerror="true">
    </exec>
  </target> 

  <target name="execute.test">
    <!-- we need to have relative path -->
    <pathconvert property="test.source.relative">
      <fileset file="${test.source.absolute}" />
      <map from="${test.sources}/" to="" />
    </pathconvert>
    <!-- run one particular test -->
    <junit fork="true" printsummary="true" haltonfailure="no">
      <jvmarg value="-Xmx2g"/>
      <jvmarg value="-Djava.library.path=native-lib"/>
      <classpath>
	<fileset dir="lib-build">
	  <include name="**/*.jar"/>
	</fileset>
	<fileset dir="lib">
	  <include name="**/*.jar"/>
	</fileset>
	<pathelement location="${build}" />
      </classpath>
      <formatter type="xml" />
      <batchtest todir="${test.reports}" skipNonTests="true">
	<fileset dir="${test.sources}">
          <filename name="${test.source.relative}" />
	</fileset>
      </batchtest>
    </junit>
  </target>

  <target name="parallel_test" depends="compile,dist">
    <for
	keepgoing="false"
	threadCount="1"
	parallel="true"
	param="test.source.absolute">
      <path>
	<fileset dir="${test.sources}">
	  <include name="peergos/email/tests/*.java"/>
	</fileset>
      </path>
      <sequential>
	<antcall target="execute.test">
	  <param name="test.source.absolute" value="@{test.source.absolute}"/>
	</antcall>
      </sequential>
    </for>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${dist}"/>
    <delete dir="war"/>
  </target>
</project>
